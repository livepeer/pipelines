name: E2E Monitor
# TODO: Improve browser caching

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose the environment"
        required: true
        default: "staging"
        type: choice
        options:
          - production
          - staging
  schedule:
    - cron: "*/5 * * * *"

jobs:
  prepare:
    name: Prepare dynamic matrix for job execution
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.prepare.outputs.matrix }}
      trigger: ${{ steps.prepare.outputs.trigger }}
    steps:
      - name: Read workflow input
        id: prepare
        shell: python
        run: |
          import json
          import os

          ENV_MAPPING = {
              'staging': {"name": "staging", "environment": "Staging - e2e"},
              'production': {"name": "production", "environment": "Production - e2e"},
          }

          def jsonify(item_lists: list[str]) -> str:
              return json.dumps(item_lists, separators=(",", ":"))

          def output(items: list[dict]):
              trigger = "true"
              if not items:
                  trigger = "false"
              print(f"Trigger condition is {trigger}")

              json_modules = jsonify({"env": items})
              github_output = f"matrix={json_modules}\n"
              with open(os.environ["GITHUB_OUTPUT"], "a") as f:
                  f.write(github_output)
                  f.write(f"trigger={trigger}\n")

          def main(event_name):
              if event_name == 'schedule':
                  return output(list(ENV_MAPPING.values()))
              elif event_name == 'workflow_dispatch' and "${{ inputs.environment }}" in ENV_MAPPING.keys():
                  return output([ENV_MAPPING["${{ inputs.environment }}"]])

          if __name__ == "__main__":
              main("${{ github.event_name }}")

  e2e:
    needs: prepare
    if: ${{ needs.prepare.outputs.trigger == 'true' }}
    name: Run E2E for ${{ matrix.env.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    environment: ${{ matrix.env.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --filter app-e2e...

      - name: Cache Playwright Browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-browsers-

      - name: Install Playwright Browsers and Dependencies
        run: pnpm --filter app-e2e exec playwright install --with-deps chrome

      - name: Run Playwright tests for ${{ matrix.env.name }}
        id: playwright
        env:
          TEST_APP_URL: ${{ secrets.TEST_APP_URL }}
          TEST_EMAIL: ${{ secrets.TEST_EMAIL }}
          TEST_OTP_CODE: ${{ secrets.TEST_OTP_CODE }}
          WHIP_REGIONS: ${{ vars.WHIP_REGIONS }}
          LIVEPEER_PROMETHEUS_JOB_NAME: e2e
          LIVEPEER_PROMETHEUS_URL: ${{ secrets.LIVEPEER_PROMETHEUS_URL }}
          ENVIRONMENT: ${{ matrix.env.name }}
        run: pnpm --filter app-e2e monitor
        continue-on-error: true

      - name: Upload test screenshots for staging
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: screenshots-${{ matrix.env.name }}
          path: apps/app-e2e/screenshots/
          retention-days: 14

      - name: Fail workflow if tests failed for ${{ matrix.env.name }}
        if: steps.playwright.outcome == 'failure'
        run: |
          echo "::error::Playwright tests failed for the ${{ matrix.env.name }} environment."
          exit 1
