openapi: 3.0.0
info:
  title: Livepeer Showcase API
  version: 1.0.0
  description: |
    API for managing AI video processing pipelines and streams in the Livepeer Showcase application.
    Supports creation and management of various pipeline types, stream configuration, and real-time processing.

servers:
  - url: https://showcase.livepeer.org/api
    description: Production server

security:
  - ApiKeyAuth: []
  - PaymentAuth: []

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
    PaymentAuth:
      type: apiKey
      in: header
      name: x-payment-token

  schemas:
    ModelCard:
      type: object
      properties:
        baseModel:
          type: string
        modelType:
          type: string
        license:
          type: string
        intendedUse:
          type: string
        trainingDataset:
          type: string
        evaluationResult:
          type: string

    Pipeline:
      type: object
      required:
        - name
        - type
        - model_id
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        is_private:
          type: boolean
          default: true
        type:
          type: string
          enum:
            - live-video-to-video
            - depth-anything
            - segment-anything-2
            - text-to-image
            - image-to-image
            - image-to-video
            - upscale
            - audio-to-text
            - text-to-speech
            - llm
            - image-to-text
        model_id:
          type: string
          description: ID of the model to use for this pipeline
        model_card:
          $ref: '#/components/schemas/ModelCard'
        comfy_ui_json:
          type: object
          description: ComfyUI workflow configuration for the pipeline
        pipeline_params:
          type: object
          description: Additional configuration parameters specific to the pipeline type
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Stream:
      type: object
      required:
        - pipeline_id
      properties:
        id:
          type: string
        pipeline_id:
          type: string
        pipeline_params:
          type: object
        stream_key:
          type: string
        output_playback_id:
          type: string
        output_stream_url:
          type: string
          description: RTMP ingest URL for streaming content into the pipeline
        ingest_urls:
          type: object
          properties:
            rtmp:
              type: string
              description: RTMP ingest URL for streaming content
            whip:
              type: string
              description: WHIP ingest URL for WebRTC streaming
        status:
          type: string
          enum:
            - active
            - inactive
            - error

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          enum:
            - BadRequest
            - ServiceUnavailable
            - Unauthorized
            - PaymentRequired
            - ResourceNotFound
            - ValidationError
        message:
          type: string
          description: Detailed error message with operation context
        details:
          type: object
          description: Additional error context specific to the operation
        operation:
          type: string
          description: The operation that caused the error
        timestamp:
          type: string
          format: date-time

paths:
  /pipelines:
    post:
      tags:
        - Pipelines
      summary: Create a new pipeline
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
      responses:
        '201':
          description: Pipeline created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Pipelines
      summary: List all pipelines
      parameters:
        - name: type
          in: query
          schema:
            type: string
        - name: is_private
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of pipelines
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pipeline'

  /pipelines/{id}:
    get:
      tags:
        - Pipelines
      summary: Get pipeline by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Pipeline details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
    delete:
      tags:
        - Pipelines
      summary: Delete a pipeline
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Pipeline deleted successfully
        '404':
          description: Pipeline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Pipelines
      summary: Update pipeline configuration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                comfy_ui_json:
                  type: object
                pipeline_params:
                  type: object
      responses:
        '200':
          description: Pipeline updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'

  /streams:
    post:
      tags:
        - Streams
      summary: Create a new stream with pipeline
      description: |
        Creates a new stream with the specified pipeline configuration. The response includes
        RTMP ingest URL that can be used to stream content into the pipeline.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stream'
      responses:
        '201':
          description: Stream created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'

  /streams/ingest/whip:
    post:
      tags:
        - Streams
      summary: Create WHIP ingest endpoint
      description: |
        Creates a WebRTC-HTTP Ingest Protocol (WHIP) endpoint for streaming content.
        Use this endpoint to obtain WHIP configuration for WebRTC-based streaming.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - stream_id
              properties:
                stream_id:
                  type: string
                  description: ID of the stream to ingest into
                ice_servers:
                  type: array
                  items:
                    type: object
                    properties:
                      urls:
                        type: array
                        items:
                          type: string
                      username:
                        type: string
                      credential:
                        type: string
      responses:
        '201':
          description: WHIP endpoint created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  whip_url:
                    type: string
                    description: WHIP ingest endpoint URL
                  ice_servers:
                    type: array
                    items:
                      type: object
                      properties:
                        urls:
                          type: array
                          items:
                            type: string
                        username:
                          type: string
                        credential:
                          type: string

  /streams/{id}:
    get:
      tags:
        - Streams
      summary: Get stream details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Stream details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'
    delete:
      tags:
        - Streams
      summary: Delete a stream
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Stream deleted successfully
        '404':
          description: Stream not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /streams/{id}/playback:
    patch:
      tags:
        - Streams
      summary: Update stream playback endpoint
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                playback_id:
                  type: string
                rtmp_url:
                  type: string
                playback_policy:
                  type: string
                  enum: [public, private]
      responses:
        '200':
          description: Playback endpoint updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'

  /streams/{id}/status:
    get:
      tags:
        - Streams
      summary: Get stream status
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Stream status
          content:
            text/event-stream:
              schema:
                type: object
                properties:
                  active:
                    type: boolean
                  health:
                    type: object
                    properties:
                      fps:
                        type: number
                      latency:
                        type: number
                  configuration:
                    type: object
                  error:
                    type: string
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          enum: [status, error, progress]
                        timestamp:
                          type: string
                          format: date-time
                        data:
                          type: object

  /live/video-to-video/{streamKey}/update:
    post:
      tags:
        - Streams
      summary: Update stream configuration
      parameters:
        - name: streamKey
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Configuration parameters specific to pipeline type
      responses:
        '200':
          description: Configuration updated successfully

  /streams/{id}/events:
    get:
      tags:
        - Streams
      summary: Get stream events
      description: |
        Stream events in real-time using Server-Sent Events (SSE).
        Events include status updates, errors, and progress information.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Stream of events
          content:
            text/event-stream:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    enum: [status, error, progress, worker]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                      progress:
                        type: number
                      status:
                        type: string
                      error:
                        type: string
                      worker_id:
                        type: string
                      timestamp:
                        type: string
                        format: date-time

  /payment/balance:
    get:
      tags:
        - Payment
      summary: Get current balance
      security:
        - ApiKeyAuth: []
        - PaymentAuth: []
      responses:
        '200':
          description: Current balance information
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    format: float
                  currency:
                    type: string
                    default: USD
                  last_updated:
                    type: string
                    format: date-time
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /payment/process:
    post:
      tags:
        - Payment
      summary: Process payment for stream
      security:
        - ApiKeyAuth: []
        - PaymentAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - stream_id
                - amount
              properties:
                stream_id:
                  type: string
                  description: ID of the stream to process payment for
                amount:
                  type: number
                  format: float
                  description: Amount to charge for stream processing
                currency:
                  type: string
                  default: USD
                  description: Currency for the payment
      responses:
        '200':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  transaction_id:
                    type: string
                  status:
                    type: string
                    enum: [success, pending]
                  amount:
                    type: number
                    format: float
                  currency:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        '400':
          description: Invalid payment request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '402':
          description: Payment required or failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
